#include <iostream>
#include <cstdlib>
#include <string>

using namespace std;

template <typename T>
class Ldde;


template <typename T>
class No {
    private:
        T valor;
        No* ant;
        No* prox;
    public:
        T getValor();
        No(T valor): valor(valor), ant(NULL), prox(NULL){}

    friend class Ldde<T>;
};


template <typename T>
class Ldde {
    private:
        No<T>* primeiro;
        No<T>* ultimo;
        int n;
    public:
        Ldde(): primeiro(NULL), ultimo(NULL), n(0){
        }

        bool insere (T valor){


            No<T>* novo = new No<T>(valor);
            No<T>* a = NULL;
            No<T>* b = primeiro;

            while (b && b->valor < novo->valor ){
                a = b;
                b = b->prox;
            }

            if (a)
                a->prox = novo;
            else
                primeiro = novo;


            if (b)
                b->ant = novo;
            else
                ultimo = novo;

            novo->prox = b;
            novo->ant = a;

                n++;
                return true;

        }

        No<T>* busca (T valor){
        No<T>* atual = primeiro;
            while ( atual && atual -> valor <= valor) {
                    if (valor == atual->valor)
                        return atual;
                    atual = atual -> prox;
                }
                return NULL;


        }


        bool remover (T val){
            No<T>* b = busca(val);
            if(!b)
                return false;

            No<T>* a = b->ant;
            No<T>* c = b->prox;


            if (a)
                a->prox = c;
            else
                primeiro = c;

            if(c)
                c->ant = a;
            else
                ultimo = a;




            delete b;
            n--;
            return true;
        }


        void imprime (Ldde) {
            No<T>* atual = primeiro;
                while (atual){
                    cout << atual->valor <<endl;
                    atual = atual -> prox;
                    }


        }



};


int main()
{

    Ldde <int> L1;
    L1.insere(3);
    L1.insere(7);
    L1.insere(12);
    L1.insere(1);
    L1.remover(7);
    L1.remover(1);
    L1.imprime(L1);





    return 0;
}
